#! /usr/bin/make -f

BOOTDIR   := /boot/Efi/Secure
KEYSDIR   := /etc/secure-boot
SIGNER    := ArchSecureBoot

SUFFIX    :=
KERNEL    := /boot/vmlinuz-linux${SUFFIX}
INITRAMFS := /boot/intel-ucode.img /boot/initramfs-linux${SUFFIX}.img
EFISTUB   := /usr/lib/systemd/boot/efi/linuxx64.efi.stub

BUILDDIR  := $(shell mktemp -d)

default:
	@echo Make targets: keys, install, update

clean:
	rm -rf $(BUILDDIR)

update:  $(BOOTDIR)/combined-boot-signed${SUFFIX}.efi
install: update
	efibootmgr -c -l '\Efi\Secure\combined-boot-signed${SUFFIX}.efi' -L 'SecureBoot linux${SUFFIX}'

$(BOOTDIR)/combined-boot-signed${SUFFIX}.efi: $(BUILDDIR)/combined-boot-signed.efi
	@mkdir -p $(BOOTDIR)
	cp $< $@


$(BUILDDIR)/cmdline.txt:
	@mkdir -p $(BUILDDIR)
	echo -n `</proc/cmdline` > $@

$(BUILDDIR)/initramfs.img: $(INITRAMFS)
	@mkdir -p $(BUILDDIR)
	cat $^ > $@

$(BUILDDIR)/combined-boot.efi: $(BUILDDIR)/cmdline.txt $(BUILDDIR)/initramfs.img $(EFISTUB) /etc/os-release
	objcopy \
	        --add-section .osrel=/etc/os-release --change-section-vma .osrel=0x20000 \
	        --add-section .cmdline=$(BUILDDIR)/cmdline.txt --change-section-vma .cmdline=0x30000 \
	        --add-section .linux=$(KERNEL) --change-section-vma .linux=0x40000 \
	        --add-section .initrd=$(BUILDDIR)/initramfs.img --change-section-vma .initrd=0x3000000 \
	        $(EFISTUB) $@

$(BUILDDIR)/combined-boot-signed.efi: $(BUILDDIR)/combined-boot.efi $(KEYSDIR)/db.key
	sbsign --key $(KEYSDIR)/db.key --cert $(KEYSDIR)/db.crt --output $@ $<


# shortcuts
build:   $(BUILDDIR)/combined-boot.efi
sign:    $(BUILDDIR)/combined-boot-signed.efi


### setup keys.
### need run only once.

keys: $(KEYSDIR)/PK.auth $(KEYSDIR)/KEK.auth $(KEYSDIR)/db.auth

$(KEYSDIR)/%.crt: $(KEYSDIR)/%.key;
$(KEYSDIR)/%.key: COMMONNAME = $(SIGNER) $(basename $(notdir $@))
$(KEYSDIR)/%.key:
	@mkdir -p $(KEYSDIR)
	openssl req -new -x509 -newkey rsa:2048 -subj "/CN=$(COMMONNAME)/" \
	    -keyout $@ -out $(@:.key=.crt) -days 3650 -nodes -sha256

$(KEYSDIR)/uuid:
	uuidgen -r > $@

$(KEYSDIR)/%.esl: $(KEYSDIR)/%.key $(KEYSDIR)/uuid
	cert-to-efi-sig-list -g `cat $(KEYSDIR)/uuid` $(@:.esl=.crt) $@


$(KEYSDIR)/PK.auth: $(KEYSDIR)/PK.crt $(KEYSDIR)/PK.esl
	sign-efi-sig-list -k $(KEYSDIR)/PK.key -c $(KEYSDIR)/PK.crt PK $(KEYSDIR)/PK.esl $@

$(KEYSDIR)/KEK.auth: $(KEYSDIR)/PK.crt $(KEYSDIR)/KEK.esl
	sign-efi-sig-list -c $(KEYSDIR)/PK.crt -k $(KEYSDIR)/PK.key KEK $(KEYSDIR)/KEK.esl $@

$(KEYSDIR)/db.auth: $(KEYSDIR)/KEK.crt $(KEYSDIR)/db.esl
	sign-efi-sig-list -c $(KEYSDIR)/KEK.crt -k $(KEYSDIR)/KEK.key db $(KEYSDIR)/db.esl $@


.PRECIOUS: $(KEYSDIR)/%.key $(KEYSDIR)/%.crt $(KEYSDIR)/%.esl
.PHONY: default clean install
.DEFAULT: default
